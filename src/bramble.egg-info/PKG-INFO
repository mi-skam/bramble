Metadata-Version: 2.4
Name: bramble
Version: 0.1.0
Summary: Digital signage system using MPV with IPC control
Requires-Python: >=3.11
Description-Content-Type: text/markdown
Requires-Dist: pyyaml>=6.0
Requires-Dist: click>=8.1.0
Requires-Dist: python-mpv-jsonipc>=1.2.0
Requires-Dist: watchdog>=3.0.0
Provides-Extra: dev
Requires-Dist: pytest>=7.4.0; extra == "dev"
Requires-Dist: pytest-cov>=4.1.0; extra == "dev"
Requires-Dist: ruff>=0.1.0; extra == "dev"
Requires-Dist: mypy>=1.5.0; extra == "dev"
Requires-Dist: types-pyyaml>=6.0.0; extra == "dev"

# Digital Signage System

A Python digital signage system that uses MPV player with IPC control for seamless media playback. Supports both images and videos with configurable display durations, designed to be prototypeable on workstations and deployable to Raspberry Pi.

## Features

- **MPV with IPC Control**: Gapless media switching using MPV's JSON IPC interface
- **Mixed Media Support**: Images (with configurable duration) and videos
- **Auto-Detection**: Platform-specific MPV configuration (GPU for desktop, DRM for Pi)
- **Playlist Management**: Automatic playlist generation and directory watching
- **CLI Interface**: Simple commands for testing and control
- **Configuration**: YAML config and environment variable support
- **Graceful Handling**: Error handling and fallbacks for missing dependencies

## Quick Start

### Prerequisites

**MPV Player** is required:
```bash
# macOS
brew install mpv

# Ubuntu/Debian/Raspberry Pi OS
sudo apt-get install mpv

# Arch Linux
sudo pacman -S mpv
```

### Installation

1. Clone and setup:
```bash
git clone <repository-url>
cd bramble
pip install -e .
```

2. Create media directory and add content:
```bash
mkdir media
# Copy your images and videos to the media/ directory
```

3. Test in windowed mode:
```bash
python main.py --test-mode
```

## Usage

### Basic Commands

```bash
# Start signage (fullscreen)
python main.py

# Start in test mode (windowed)
python main.py --test-mode

# Use custom media directory
python main.py --media-dir /path/to/media

# Show status
python main.py status

# Control playback
python main.py next        # Skip to next
python main.py prev        # Go to previous
python main.py refresh     # Reload playlist

# Manage media files
python main.py list        # List current media
python main.py add /path/to/file.jpg
python main.py remove filename.jpg
```

### Using Just (Recommended)

Install [just](https://github.com/casey/just) for convenient commands:

```bash
# Install dependencies
just install

# Run in test mode
just test-run

# Check if MPV is installed
just check-mpv

# Create demo content
just demo

# Deploy to Raspberry Pi
just deploy-pi pi@192.168.1.100
```

## Configuration

Configuration is loaded from (in precedence order):
1. Command line arguments
2. Environment variables
3. `config.yaml` file
4. Defaults

### config.yaml
```yaml
# Media directory
media_directory: "./media"

# Image display duration (seconds)
default_image_duration: 5.0

# MPV settings (null = auto-detect)
video_output: null          # gpu, drm, x11, wayland
hardware_decode: "auto"     # auto, yes, no, vaapi, nvdec

# Display settings
fullscreen: true
test_mode: false

# Directory watching
watch_directory: true

# Logging
log_level: "INFO"
```

### Environment Variables

Prefix all config keys with `SIGNAGE_`:
```bash
export SIGNAGE_MEDIA_DIRECTORY="/home/pi/media"
export SIGNAGE_IMAGE_DURATION="10.0"
export SIGNAGE_FULLSCREEN="true"
export SIGNAGE_TEST_MODE="false"
export SIGNAGE_LOG_LEVEL="DEBUG"
```

## Raspberry Pi Deployment

### Automatic Setup
```bash
# On the Pi
just pi-setup

# Install as systemd service
just install-service
sudo systemctl start signage
```

### Manual Setup
```bash
# Update system
sudo apt-get update
sudo apt-get install mpv python3-pip

# Install application
pip3 install -e .

# Create systemd service
sudo tee /etc/systemd/system/signage.service > /dev/null << 'EOF'
[Unit]
Description=Digital Signage System
After=graphical-session.target

[Service]
Type=simple
User=pi
WorkingDirectory=/home/pi/bramble
ExecStart=/usr/bin/python3 main.py
Restart=always
RestartSec=5
Environment=DISPLAY=:0

[Install]
WantedBy=graphical-session.target
EOF

# Enable and start
sudo systemctl daemon-reload
sudo systemctl enable signage.service
sudo systemctl start signage.service
```

### Remote Deployment
```bash
# Deploy to Pi over SSH
just deploy-pi pi@192.168.1.100

# Check service status
ssh pi@192.168.1.100 'sudo systemctl status signage'

# View logs
ssh pi@192.168.1.100 'journalctl -u signage.service -f'
```

## Supported Media Formats

**Images**: JPG, JPEG, PNG, GIF, BMP, TIFF, WebP, SVG
**Videos**: MP4, AVI, MKV, MOV, WMV, FLV, WebM, M4V, MPG, MPEG

Files are sorted alphabetically and looped continuously.

## Platform-Specific Settings

The system auto-detects the platform and configures MPV accordingly:

**macOS/Linux Desktop**: `--vo=gpu --hwdec=auto`
**Raspberry Pi**: `--vo=drm --hwdec=auto --no-config`

## Development

### Setup Development Environment
```bash
# Install with dev dependencies
pip install -e .[dev]

# Run checks
just lint       # Ruff linting
just typecheck  # MyPy type checking
just test       # Pytest
just check      # All checks
```

### Project Structure
```
bramble/
├── src/signage/
│   ├── player.py      # MPV IPC controller
│   ├── scheduler.py   # Playlist and timing management
│   ├── config.py      # Configuration handling
│   └── cli.py         # CLI interface
├── main.py           # Entry point
├── config.yaml       # Default configuration
├── justfile          # Task runner commands
└── README.md         # This file
```

## Troubleshooting

### MPV Not Found
```
Error: MPV is not installed!
```
Install MPV using your system's package manager (see Prerequisites).

### Permission Issues on Pi
```bash
# Add user to video group
sudo usermod -a -G video pi

# Check DRM permissions
ls -la /dev/dri/
```

### Socket Connection Failed
Check that:
1. MPV started successfully
2. No other instances are running
3. Temp directory is writable

### Service Won't Start
```bash
# Check service status
sudo systemctl status signage.service

# View detailed logs
journalctl -u signage.service -f

# Check MPV on Pi
sudo -u pi mpv --vo=drm --version
```

## License

MIT License - see LICENSE file for details.
